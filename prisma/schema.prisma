// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUYER
  VENDOR
  SUB_ADMIN
  ADMIN
}

enum DivisionType {
  CANTON
  PROVINCE
  REGION
  COUNTY
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum ExperienceLevel {
  JUNIOR
  MID
  SENIOR
}


enum ApplicationStatus {
  PENDING
  INTERVIEW
  REJECTED
  HIRED
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String?
  firstName          String?
  lastName           String?
  email              String    @unique
  password           String
  phoneNumber        String?   @unique
  role               Role      @default(BUYER)
  verificationToken  String?
  isVerified         Boolean   @default(false)
  isActive           Boolean   @default(true)
  isApprovalRequired Boolean   @default(false)
  userName           String?
  address            Address[]
  cart               Cart?
  store              Store?
  order              Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id          Int      @id @default(autoincrement())
  shopName    String?
  country     String
  apartment   String?
  street      String?
  state       String?
  city        String?
  zipCode     String
  province    String?
  phoneNumber String?
  addressType String // "shipping", "billing", or "store"
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, addressType], name: "unique_address_per_type_per_user")
}

model Store {
  id               Int      @id @default(autoincrement())
  storeName        String
  storeUrl         String?
  storePhoneNumber String?
  storeStatus      String   @default("pending")
  vendorId         Int      @unique
  user             User     @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  country          String?
  apartment        String?
  street           String?
  state            String?
  city             String?
  zipCode          String?
  province         String?
  phoneNumber      String?
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  categoryType  String
  isActive      Boolean    @default(true)
  parentId      Int?
  parent        Category?  @relation("CategoryToSubcategories", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories Category[] @relation("CategoryToSubcategories")
  products      Product[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Product {
  id               Int         @id @default(autoincrement())
  title            String
  description      String?
  price            Decimal     @default(0.0) @db.Decimal(10, 2)
  image            String
  shortDescription String
  longDescription  String
  categoryId       Int
  category         Category    @relation(fields: [categoryId], references: [id])
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  CartItem         CartItem[]
  OrderItem        OrderItem[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  total     Decimal?   @db.Decimal(10, 2)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
}

model Order {
  id Int @id @default(autoincrement())

  orderNumber String      @unique
  total       Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  notes       String?
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  orderItems OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Job {
  id                  Int             @id @default(autoincrement())
  title               String
  description         String
  requirements        String
  location            String
  jobType             JobType
  salaryRange         String?
  experienceLevel     ExperienceLevel
  isActive             Boolean @default(true)
  postedAt            DateTime        @default(now())
  applicationDeadline DateTime

  applications Application[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Application {
  id            String            @id @default(uuid())
  jobId         Int
  job           Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicantName String
  email         String
  phone         String?
  resume        String
  coverLetter   String?
  status        ApplicationStatus @default(PENDING)
  appliedAt     DateTime          @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id              Int           @id @default(autoincrement())
  name            String
  has_subdivision Boolean       @default(false)
  SubDivision     SubDivision[]
  createdAt       DateTime      @default(now())
}

model SubDivision {
  id        Int          @id @default(autoincrement())
  name      String
  type      DivisionType
  countryId Int
  country   Country      @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
}

model Faq {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FinTerm {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VendorTerm {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BuyerTerm {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PrivayPolicy {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefundPolicy {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TermService {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebsiteContent {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  type      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
