// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUYER
  VENDOR
  SUB_ADMIN
  ADMIN
}

enum DivisionType {
  CANTON
  PROVINCE
  REGION
  COUNTY
}

model User {
  id                Int       @id @default(autoincrement())
  name              String?
  firstName         String?
  lastName          String?
  email             String    @unique
  password          String
  phoneNumber       String?   @unique
  role              Role      @default(BUYER)
  verificationToken String?
  isVerified        Boolean   @default(false)
  isActive          Boolean   @default(true)
  userName          String?
  address           Address[]
  cart              Cart?
  store             Store?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id          Int      @id @default(autoincrement())
  shopName    String
  country     String
  apartment   String?
  street      String?
  state       String?
  city        String?
  zipCode     String
  province    String?
  phoneNumber String?
  addressType String
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeId     Int      @unique
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Store {
  id               Int      @id @default(autoincrement())
  storeName        String
  storeUrl         String?
  storePhoneNumber String?
  storeStatus      String   @default("pending")
  userId           Int      @unique
  address          Address?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  categoryType  String
  isActive      Boolean    @default(true)
  parentId      Int?
  parent        Category?  @relation("CategoryToSubcategories", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories Category[] @relation("CategoryToSubcategories")
  products      Product[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Product {
  id               Int        @id @default(autoincrement())
  title            String
  description      String?
  price            Decimal    @default(0.0) @db.Decimal(10, 2)
  image            String
  shortDescription String
  longDescription  String
  categoryId       Int
  category         Category   @relation(fields: [categoryId], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  CartItem         CartItem[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  total     Decimal?   @db.Decimal(10, 2)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
}

model Country {
  id              Int           @id @default(autoincrement())
  name            String
  has_subdivision Boolean       @default(false)
  SubDivision     SubDivision[]
  createdAt       DateTime      @default(now())
}

model SubDivision {
  id        Int          @id @default(autoincrement())
  name      String
  type      DivisionType
  countryId Int
  country   Country      @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
}
