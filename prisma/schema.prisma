// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUYER
  VENDOR
  SUB_ADMIN
  ADMIN
}

enum DivisionType {
  CANTON
  PROVINCE
  REGION
  COUNTY
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum ExperienceLevel {
  JUNIOR
  MID
  SENIOR
}

enum ApplicationStatus {
  PENDING
  INTERVIEW
  REJECTED
  HIRED
}

enum ProductType {
  SIMPLE
  VARIABLE
  AFFILIATE_PRODUCT
  GROUP_PRODUCT
}

enum StockStatus {
  IN_STOCK
  OUT_OF_STOCK
  ON_BACKORDER
}

enum BackOrder {
  ALLOW
  DO_NOT_ALLOW
  ALLOW_BUT_NOTIFY
}

enum ShippingClass {
  NONE
  FLAT_RATE
  PORTUGAL_FLAT_RATE
}

enum TaxStatus {
  TAXABLE
  SHIPPING_ONLY
  NONE
}

enum TaxClass {
  STANDARD
  ZERO_RATE
  REDUCED_RATE
}

enum ProductStatus {
  ONLINE
  DRAFT
}

enum Visibility {
  VISIBLE
  SEARCH
  HIDDEN
  CATALOG
}

enum VendorOrderStatus {
  PENDING
  ACCEPTED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum CouponStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

model User {
  id                 Int           @id @default(autoincrement())
  name               String?
  firstName          String?
  lastName           String?
  email              String        @unique
  password           String
  phoneNumber        String?       @unique
  role               Role          @default(BUYER)
  verificationToken  String?
  isVerified         Boolean       @default(false)
  isActive           Boolean       @default(true)
  isApprovalRequired Boolean       @default(false)
  userName           String?
  address            Address[]
  cart               Cart?
  store              Store?
  order              Order[]
  vendorOrder        VendorOrder[]

  userCoupons   User_Coupon[]
  vendorCoupons VendorCoupon[]
  products      Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id          Int      @id @default(autoincrement())
  shopName    String?
  country     String
  apartment   String?
  street      String?
  state       String?
  city        String?
  zipCode     String
  province    String?
  phoneNumber String?
  addressType String
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, addressType], name: "unique_address_per_type_per_user")
}

model Store {
  id          Int      @id @default(autoincrement())
  storeName   String
  storeUrl    String?
  storeStatus String   @default("pending")
  vendorId    Int      @unique
  user        User     @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  country     String?
  apartment   String?
  street      String?
  state       String?
  city        String?
  zipCode     String?
  province    String?
  phoneNumber String?
}

model Category {
  id                Int               @id @default(autoincrement())
  name              String
  categoryType      String
  isActive          Boolean           @default(true)
  parentId          Int?
  parent            Category?         @relation("CategoryToSubcategories", fields: [parentId], references: [id], onDelete: Cascade)
  subcategories     Category[]        @relation("CategoryToSubcategories")
  // products          Product[] // One-to-many relationship (if you want to keep a primary category)
  productCategories ProductCategory[] // Many-to-many relationship through join table

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                 Int           @id @default(autoincrement())
  title              String
  productType        ProductType
  isDownloadable     Boolean?      @default(false)
  isVirtual          Boolean?      @default(false)
  productUrl         String?
  buttonText         String?
  price              Decimal       @default(0.0) @db.Decimal(10, 2)
  discountedPrice    Decimal?      @default(0.0) @db.Decimal(10, 2)
  from               DateTime?
  to                 DateTime?
  shortDescription   String?
  image              String?
  description        String
  sku                String
  stockStatus        StockStatus?  @default(IN_STOCK)
  stockManagement    Boolean       @default(false)
  stockQuantity      Int?
  lowStockThreshold  Int?
  backOrder          BackOrder?    @default(DO_NOT_ALLOW)
  limitOnePerOrder   Boolean       @default(false)
  shippingRequired   Boolean       @default(false)
  weight             Decimal?      @default(0.0) @db.Decimal(10, 2)
  length             Decimal?      @default(0.0) @db.Decimal(10, 2)
  width              Decimal?      @default(0.0) @db.Decimal(10, 2)
  height             Decimal?      @default(0.0) @db.Decimal(10, 2)
  seoTitle           String?
  metaDescription    String?       @db.Text
  focusKeyword       String?
  slug               String?       @unique // URL-friendly version of title
  shippingClass      ShippingClass @default(NONE)
  taxStatus          TaxStatus     @default(NONE)
  taxClass           TaxClass      @default(ZERO_RATE)
  bulkDiscount       Boolean       @default(false)
  minQuantity        Int?
  discountPercentage Decimal       @default(0.0) @db.Decimal(10, 2)
  productStatus      ProductStatus @default(ONLINE)
  visibility         Visibility    @default(VISIBLE)
  purchaseNote       String?       @db.Text
  enableReviews      Boolean       @default(true)

  // Upsells relationship (products that this product upsells to)
  upsellTo ProductUpsell[] @relation("UpsellTo")

  // Cross-sells relationship (products that this product cross-sells to)
  crossSellTo ProductCrossSell[] @relation("CrossSellTo")

  // Products that have this product as an upsell
  upsellProducts ProductUpsell[] @relation("UpsellProduct")

  // Products that have this product as a cross-sell
  crossSellProducts ProductCrossSell[] @relation("CrossSellProduct")

  // For grouped products - products included in this group
  groupedProducts ProductGroupItem[] @relation("ParentGroupProduct")

  // Products that include this product in their group
  includedInGroups ProductGroupItem[] @relation("ChildGroupProduct")

  vendorId          Int
  productCategories ProductCategory[] // Many-to-many relationship through join table
  cartItem          CartItem[]
  orderItem         OrderItem[]
  tags              Tag[]
  ProductTags       ProductTag[]
  attributes        Attribute[]
  vendor            User              @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductCategory {
  id         Int      @id @default(autoincrement())
  productId  Int
  categoryId Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, categoryId])
}

model ProductTag {
  id        Int     @id @default(autoincrement())
  productId Int
  tagId     Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, tagId])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?

  productTags ProductTag[]
}

model ProductUpsell {
  id              Int @id @default(autoincrement())
  productId       Int // The main product
  upsellProductId Int // The product being offered as an upsell

  product       Product @relation("UpsellTo", fields: [productId], references: [id], onDelete: Cascade)
  upsellProduct Product @relation("UpsellProduct", fields: [upsellProductId], references: [id], onDelete: Cascade)

  @@unique([productId, upsellProductId])
}

model ProductCrossSell {
  id                 Int @id @default(autoincrement())
  productId          Int // The main product
  crossSellProductId Int // The product being offered as a cross-sell

  product          Product @relation("CrossSellTo", fields: [productId], references: [id], onDelete: Cascade)
  crossSellProduct Product @relation("CrossSellProduct", fields: [crossSellProductId], references: [id], onDelete: Cascade)

  @@unique([productId, crossSellProductId])
}

model ProductGroupItem {
  id             Int @id @default(autoincrement())
  productId      Int // The grouped product
  childProductId Int // The product included in the group

  // Relations
  product      Product @relation("ParentGroupProduct", fields: [productId], references: [id], onDelete: Cascade)
  childProduct Product @relation("ChildGroupProduct", fields: [childProductId], references: [id], onDelete: Cascade)

  @@unique([productId, childProductId])
}

model Attribute {
  id        Int     @id @default(autoincrement())
  name      String?
  isVisible Boolean @default(false)

  productId Int?
  product   Product?         @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    AttributeValue[]
}

model AttributeValue {
  id          Int       @id @default(autoincrement())
  value       String?
  attributeId Int
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  total     Decimal?   @db.Decimal(10, 2)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
}

model Order {
  id Int @id @default(autoincrement())

  orderNumber String      @unique
  total       Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  notes       String?
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  orderItems   OrderItem[]
  vendorOrders VendorOrder[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  vendorOrderId Int?
  vendorOrder   VendorOrder? @relation(fields: [vendorOrderId], references: [id])
}

model VendorOrder {
  id       Int               @id @default(autoincrement())
  orderId  Int // Reference to the main order
  order    Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  vendorId Int // Reference to the vendor
  vendor   User              @relation(fields: [vendorId], references: [id])
  status   VendorOrderStatus @default(PENDING)

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, vendorId])
}

model Job {
  id                  Int             @id @default(autoincrement())
  title               String
  description         String          @db.Text
  requirements        String          @db.Text
  location            String
  jobType             JobType
  salaryRange         String?
  experienceLevel     ExperienceLevel
  isActive            Boolean         @default(true)
  postedAt            DateTime        @default(now())
  applicationDeadline DateTime

  applications Application[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Application {
  id          Int               @id @default(autoincrement())
  jobId       Int
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  firstName   String
  lastName    String
  email       String
  phone       String?
  resume      String?
  coverLetter String?
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model VendorCoupon {
  id            Int           @id @default(autoincrement())
  couponCode    String
  discountValue Decimal       @db.Decimal(10, 2)
  discountType  String
  expiry        DateTime
  couponStatus  CouponStatus  @default(ACTIVE)
  minPurchase   Decimal       @db.Decimal(10, 2)
  maxUsage      Int
  description   String?
  isActive      Boolean       @default(true)
  vendorId      Int
  vendor        User          @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  userCoupons   User_Coupon[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User_Coupon {
  id       Int          @id @default(autoincrement())
  userId   Int
  couponId Int
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon   VendorCoupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
}

model Annoucement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdBy Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id              Int           @id @default(autoincrement())
  name            String
  has_subdivision Boolean       @default(false)
  SubDivision     SubDivision[]
  createdAt       DateTime      @default(now())
}

model SubDivision {
  id        Int          @id @default(autoincrement())
  name      String
  type      DivisionType
  countryId Int
  country   Country      @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
}

model Faq {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FinTerm {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VendorTerm {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BuyerTerm {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PrivayPolicy {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefundPolicy {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TermService {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PhotographGuideline {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductGuideline {
  id        Int      @id @default(autoincrement())
  text      String   @default("") @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
